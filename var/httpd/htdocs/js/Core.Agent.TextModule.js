// --
// Copyright (C) 2019â€“present Efflux GmbH, https://efflux.de/
// Part of the TextModule package.
// --
// This software comes with ABSOLUTELY NO WARRANTY. For details, see
// the enclosed file COPYING for license information (GPL). If you
// did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
// --

'use strict';

var Core = Core || {};
Core.Agent = Core.Agent || {};

Core.Agent.TextModule = (function(TargetNS) {
  TargetNS.Init = function() {
    // Get the HTML block from the footer (generated by FilterElementPost).
    const TextModuleList = Core.Config.Get('TextModuleList');
    const TextModuleSidebar = $('#TextModuleSidebar');  

    if (!TextModuleSidebar || !TextModuleList) return;

    // Move the HTML block to the correct position. Make sidebar changes depending on the action.
    if ($('.ARIARoleMain .SidebarColumn')[0]) {  // Check if sidebar exists.
      $('.SidebarColumn').append(TextModuleSidebar);
    } else {
      TargetNS.AdjustEditorWidth();  // Don't block the sidebar by the editor.

      const Selector = $('.ContentColumn')[0] ? '.ContentColumn' : '.LayoutPopup > .Content';  // Some actions use 'Content' and not 'ContentColumn'.
      $(Selector).parent().addClass('LayoutFixedSidebar SidebarLast');  // Add neccesary classes.
      $(Selector).before(TextModuleSidebar);
    }

    // Create the jsTree.
    $('#TextModuleTree').jstree({
      core: {
        plugins: ['wholerow'],
        data: TextModuleList,
        themes: {dots: false}
      }
    }).bind('loaded.jstree', function() {
      $('#TextModuleTree').jstree('open_all');
      $('#TextModuleContent li.jstree-node > a > i.fa-file-text-o').parent().css('cursor','grab');  // Styling of draggable items.
    });

    // Enable the DragAndDrop function. Low-ToDo: This function does not work if the dragging starts before the editor is fully loaded.
    // However, moving this to 'loaded.jstree' doesn't always work on some browsers.
    CKEDITOR.on('instanceReady', function(CKevent) {
      TargetNS.DragAndDrop(CKevent);
    });
  };

  // Enable the drag and drop functionality.
  TargetNS.DragAndDrop = function(CKevent) {
    const InnerEditor = CKevent.editor.getSelection().document.$.activeElement;

    // To insert text modules into the CKEditor, it needs to be focused once, otherwise it will insert the text to the top.
    const CaretPosition = $(':focus');  // Save the field which is currently focused.
    TargetNS.FocusField(InnerEditor);  // Set the focus on the editor.
    if (CaretPosition.length) TargetNS.FocusField(CaretPosition);  // If there was an old focus, set it back ...
    else TargetNS.BlurField(InnerEditor);  // ... if not, remove the focus.

    // Copy the text of the dragged item.
    CKEDITOR.document.getById('TextModuleContent').on('dragstart', function(DragStartEvent) {
      CKEDITOR.plugins.clipboard.initDragDataTransfer(DragStartEvent);  // Enable custom data types.

      const DraggedNode = DragStartEvent.data.$.srcElement || DragStartEvent.data.$.target;  // If 'srcElement' is null (IE).
      const DraggedNodeID = DraggedNode.getAttribute('id');      
      const Text = $('#TextModuleTree').jstree(true).get_node(DraggedNodeID).data.text;

      if (!Text) return;

      var DataTransfer = DragStartEvent.data.dataTransfer;
      DataTransfer.setData('text/html', Text);  // Fallback type needs to be filled (Safari).
      DataTransfer.setData('TextModule', Text);
    });

    CKevent.editor.on('paste', function(PasteEvent){
      const Text = PasteEvent.data.dataTransfer.getData('TextModule');

      if (Text) PasteEvent.data.dataValue = Text;
    });
  };

  // Change the fix width of the editor to the max-width.
  TargetNS.AdjustEditorWidth = function() {
    CKEDITOR.on('instanceReady', function() {
      const Width = $('#cke_RichText').css('width');
      $('#cke_RichText').css('width', '');
      $('#cke_RichText').css('max-width', Width);
    });  
  }

  // Focus a field.
  TargetNS.FocusField = function(field) {
    setTimeout(function(){
      field.focus();
    }, 0);
  }

  // Lose focus of a field.
  TargetNS.BlurField = function(field) {
    setTimeout(function(){
      field.blur();
    }, 0);
  }

  Core.Init.RegisterNamespace(TargetNS, 'APP_MODULE_EARLY');

  return TargetNS;
}(Core.Agent.TextModule || {}));
